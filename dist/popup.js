/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/window.js":
/*!***********************!*\
  !*** ./src/window.js ***!
  \***********************/
/***/ (() => {

eval("// helper function to set multiple attributes at once\nconst setAttributes = (element, attributeObj) => {\n    for (const [attr, val] of Object.entries(attributeObj)) {\n        element.setAttribute(attr, val);\n    }\n}\n\nconst setToLocal = async (key, val) => {\n    await new Promise(resolve => {\n        chrome.storage.local.set({[key]: val}, (r) => {\n            resolve(r);\n        });\n    })\n}\n\nconst getFromLocal = async (key) => {\n    let val = await new Promise(resolve => {\n        chrome.storage.local.get([key], (obj) => {\n            resolve(obj);\n        }); \n    })\n    return val;\n}\n\nconst removeFromLocal = async (key) => {\n    await new Promise(resolve => {\n        chrome.storage.local.remove([key], (r) => {\n            resolve(r);\n        });\n    });\n}\n\nconst getCurrentUser = async () => {\n    let session = await getFromLocal('currentSession');\n    return session.currentSession ? session.currentSession.user : null;\n}\n\n// makes a primary button given button type, id, and text for the button\nconst makePrimaryBtn = (btnType, btnID, btnText) => {\n    const newBtn = document.createElement('button');\n    setAttributes(newBtn, {\n        'type': btnType,\n        'class': 'btn btn-primary',\n        'id': btnID\n    });\n    const text = document.createTextNode(btnText);\n    newBtn.appendChild(text);\n\n    return newBtn;\n}\n\n// resets the main element to contain an empty main div container\nconst resetMain = () => {\n    const main = document.querySelector('main');\n    let mainDiv = document.querySelector('#main-container');\n    main.removeChild(mainDiv);\n\n    mainDiv = document.createElement('div');\n    setAttributes(mainDiv, {\n        'class': 'container',\n        'id': 'main-container'\n    });\n\n    main.appendChild(mainDiv);\n}\n\n// if not logged in, brings up not logged in page\n// otherwise returns the username\nconst checkLoggedIn = async () => {\n    let session = await getFromLocal('currentSession');\n    if (!session.currentSession) {\n        const card = document.createElement('div');\n        setAttributes(card, {\n            'class': 'card text-center',\n            'id': 'loggedOutCard'\n        });\n\n        const cardBody = document.createElement('div');\n        cardBody.setAttribute('class', 'card-body');\n\n        const heading = document.createElement('h1');\n        heading.setAttribute('class', 'card-title');\n        const text = document.createTextNode('You are not logged in');\n        heading.appendChild(text);\n        cardBody.appendChild(heading);\n        card.appendChild(cardBody);\n        resetMain();\n        const mainDiv = document.querySelector('#main-container');\n        mainDiv.appendChild(card);\n        return false;\n    }\n    return session.currentSession.user;\n}\n\n// creates form field with label, input field and optionally help text\nconst createFormField = (inputTitle, inputType, divID, inputID, helpText) => {\n    const newDiv = document.createElement('div');\n    setAttributes(newDiv, {\n        'class': 'mb-3',\n        'id': divID\n    });\n\n    // label\n    const label = document.createElement('label');\n    setAttributes(label, {\n        'class': 'form-label',\n        'for': inputID\n    });\n    let text = document.createTextNode(inputTitle);\n    label.appendChild(text);\n\n    const helpID = inputID + 'Help';\n\n    // input field\n    const input = document.createElement('input');\n    setAttributes(input, {\n        'type': inputType,\n        'id': inputID,\n        'name': inputID,\n        'class': 'form-control',\n        'aria-described-by': helpID\n    });\n\n    // help text\n    const help = document.createElement('div');\n    setAttributes(help, {\n        'id': helpID,\n        'class': 'form-text'\n    });\n    text = document.createTextNode(helpText);\n    help.appendChild(text);\n\n    // append everything\n    newDiv.appendChild(label);\n    newDiv.appendChild(input);\n    newDiv.appendChild(help);\n\n    return newDiv;\n}\n\nconst renderWelcome = async () => {\n    resetMain();\n    // check logged in\n    const user = await checkLoggedIn();\n    if (!user) {\n        return;\n    }\n\n    const welcomeCard = document.createElement('div');\n    setAttributes(welcomeCard, {\n        'class': 'card text-center',\n        'id': 'welcome-card'\n    });\n\n    const cardBody = document.createElement('div');\n    cardBody.setAttribute('class', 'card-body');\n\n    const welcomeHeading = document.createElement('h1');\n    welcomeHeading.setAttribute('class', 'card-title');\n\n    \n\n    const welcomeText = document.createTextNode('Welcome to your vault');\n    welcomeHeading.appendChild(welcomeText);\n\n    const btnDiv = document.createElement('div');\n    btnDiv.setAttribute('class', 'row btn-div');\n\n    const btn1 = makePrimaryBtn('button', 'welcome-add', 'Add a new password');\n    btn1.classList.add('btn-block', 'col-sm');\n    btn1.addEventListener('click', () => {\n        renderNewPass();\n    });\n\n    const btn2 = makePrimaryBtn('button', 'welcome-vault', 'Go to your passwords');\n    btn2.classList.add('btn-block', 'col-sm');\n    btn2.addEventListener('click', () => {\n        renderVault(user);\n    });\n\n    cardBody.appendChild(welcomeHeading);\n    btnDiv.appendChild(btn1);\n    btnDiv.appendChild(btn2);\n    cardBody.append(btnDiv);\n    welcomeCard.appendChild(cardBody);\n\n    const mainDiv = document.querySelector('#main-container');\n    mainDiv.appendChild(welcomeCard);\n}\n\n// checking that data to add for new credential is valid\nconst checkNewValid = () => {\n    // Unique title 1-50 characters\n\n    // username more than 1 character\n\n    // password matches guidelines\n\n    return true;\n}\n\n// saves new data to local storage and displays vault\nconst saveNewData = async () => {\n    const user = await checkLoggedIn();\n    if (!user) {\n        return;\n    }\n    \n    const form = document.querySelector('#newPwdForm');\n\n    const title = form.newTitle.value;\n    const username = form.newUsername.value;\n    const password = form.newPwd.value;\n\n    // do some encryption\n\n   \n    // allEntries is a semi-colon separated string \n    // this should be hashed or something\n    const userEntries = `${user}AllEntries`;\n    let r = await getFromLocal(userEntries);\n    let allEntries = r[userEntries] ? r[userEntries] : \"\";\n\n    if (allEntries.includes(`${title};`)) {\n        // the title we're looking for does exist\n        alert(\"Title already exists\");\n        \n    } else {\n        // add to the vault\n        const userVault = `${user}Vault`;\n        let r = await getFromLocal(userVault);\n        let vault = r[userVault];\n        console.log(vault);\n        if (vault) {\n            vault[title] = {username, password};\n        } else {\n            vault = {\n                [title]: {username, password}\n            };\n        }\n        await setToLocal(userVault, vault);\n\n        allEntries += `${title};`;\n        await setToLocal(userEntries, allEntries);\n        console.log('set finished');\n    }\n    renderVault();\n}\n\nconst deleteEntry = async (toDel) => {\n    const user = await checkLoggedIn();\n    if (!user) {\n        return;\n    }\n\n    const userEntries = `${user}AllEntries`;\n    let r = await getFromLocal(userEntries);\n    let allEntries = r[userEntries] ? r[userEntries] : \"\";\n\n    if (allEntries.includes(`${toDel};`)) {\n        // can delete this entry\n        // delete from vault\n        const userVault = `${user}Vault`;\n        let r = await getFromLocal(userVault);\n        let vault = r[userVault];\n        delete vault[toDel];\n        await setToLocal(userVault, vault);\n\n        // remove from all entries\n        console.log(`${toDel};`);\n        allEntries = allEntries.replace(`${toDel};`, '');\n        console.log(allEntries);\n        await setToLocal(userEntries, allEntries);\n    } else {\n        alert(\"Title does not exist\");\n    }\n    renderVault();\n}\n\n\n\nconst renderNewPass = async () => {\n    const user = await checkLoggedIn();\n    if (!user) {\n        return;\n    }\n    const newCard = document.createElement('div');\n    setAttributes(newCard, {\n        'class': 'card',\n        'id': 'newPassCard'\n    });\n\n    const heading = document.createElement('h1');\n    heading.setAttribute('class', 'headerÂ ');\n    const headingText = document.createTextNode('Enter new credentials');\n    heading.appendChild(headingText);\n    newCard.append(heading);\n\n    const cardBody = document.createElement('div');\n    cardBody.setAttribute('class', 'card-body');\n    const newForm = document.createElement('form');\n    newForm.setAttribute('id', 'newPwdForm');\n\n    let newInputs = [];\n    newInputs.push(createFormField('Title', 'text', 'titleDiv', 'newTitle', 'Required: title to identify your credentials'));\n    newInputs.push(createFormField('Username', 'text', 'usernameDiv', 'newUsername','Username for this account'));\n    newInputs.push(createFormField('Password', 'password', 'pwdDiv', 'newPwd', 'Required: password for this account'));\n\n    newInputs.forEach((input) => {\n        newForm.appendChild(input);\n    });\n\n    // add submit button\n    const submit = document.createElement('button');\n    setAttributes(submit, {\n        'class': 'btn btn-primary',\n        'type': 'submit',\n        'id': 'newSubmit'\n    });\n    const text = document.createTextNode('Add password');\n\n    submit.appendChild(text);\n\n    newForm.appendChild(submit);\n\n    // form behaviour\n    newForm.addEventListener('submit', (event) => {\n        event.preventDefault();\n        // validate input\n\n        // save input\n        saveNewData()\n    });\n\n    cardBody.appendChild(newForm);\n    newCard.appendChild(cardBody);\n\n    resetMain();\n    const mainDiv = document.querySelector('#main-container');\n    mainDiv.appendChild(newCard);\n}\n\nconst createPageButton = (text) => {\n    // <li class=\"page-item\"><a class=\"page-link\" href=\"#\">1</a></li>\n    const pageItem = document.createElement('li');\n    pageItem.setAttribute('class', 'page-item');\n\n    const link = document.createElement('a');\n    setAttributes(link, {\n        'class': 'page-link',\n        'href': '#'\n    });\n    const linkText = document.createTextNode(text);\n    link.appendChild(linkText);\n    pageItem.appendChild(link);\n    return pageItem;\n}\n\n// renders the page which contains details for a particular entry\nconst renderEntryDetails = async (title) => {\n    const user = await checkLoggedIn();\n    if (!user) {\n        return;\n    }\n\n    const newCard = document.createElement('div');\n    setAttributes(newCard, {\n        'class': 'card',\n        'id': 'entryPageCard'\n    });\n\n    // link to go back\n    const backLink = document.createElement('a');\n    setAttributes(backLink, {\n        'href': '#',\n        'class': 'back-link'\n    });\n    const linkText = document.createTextNode('â Back to vault');\n    backLink.appendChild(linkText);\n    backLink.addEventListener('click', (event) =>{\n        event.preventDefault();\n        renderVault();\n    });\n    newCard.appendChild(backLink);\n\n    const heading = document.createElement('h1');\n    heading.setAttribute('class', 'header');\n    const headingText = document.createTextNode(`Credentials for: ${title}`);\n    heading.appendChild(headingText);\n    newCard.appendChild(heading);\n\n    // retrieve relevant data from storage\n    const userVault = `${user}Vault`;\n    let r = await getFromLocal(userVault);\n    let vault = r[userVault];\n    const entryObj = vault[title];\n\n    // unencrypt the password\n\n    // render username and password\n    const cardBody = document.createElement('div');\n    cardBody.setAttribute('class', 'card-body');\n    const newForm = document.createElement('form');\n    newForm.setAttribute('id', 'displayPwdForm');\n\n    const userDetails = createFormField('Username', 'text', 'usernameDiv', 'displayUsername', '');\n    userDetails.querySelector('input').setAttribute('value', entryObj['username']);\n    \n    const pwdDetails = document.createElement('div');\n    setAttributes(pwdDetails, {\n        'class': 'mb-3',\n        'id': 'pwdDiv'\n    });\n    const pwdLabel = document.createElement('label');\n    setAttributes(pwdLabel, {\n        'class': 'form-label',\n        'for': 'displayPwd'\n    });\n    pwdLabel.appendChild(document.createTextNode('Password'));\n    pwdDetails.appendChild(pwdLabel);\n\n    const inputGroup = document.createElement('div');\n    setAttributes(inputGroup, {\n        'class': 'input-group mb-3'\n    });\n    const pwdInput = document.createElement('input');\n    setAttributes(pwdInput, {\n        'type': 'password',\n        'id': 'displayPwd',\n        'name': 'displayPwd',\n        'class': 'form-control'\n    });\n    pwdInput.setAttribute('value', entryObj['username']);\n    inputGroup.appendChild(pwdInput);\n\n    const visibility = document.createElement('button');\n    setAttributes(visibility, {\n        'class': 'far fa-eye btn btn-outline-secondary',\n        'id': 'toggleVisibility',\n        'type': 'button'\n    });\n    visibility.addEventListener('click', (e) => {\n        checkLoggedIn();\n        \n        const password = document.querySelector('#displayPwd');\n        const type = password.getAttribute('type') === 'password' ? 'text' : 'password';\n        password.setAttribute('type', type);\n        visibility.classList.toggle('fa-eye-slash');\n    });\n    inputGroup.appendChild(visibility);\n    pwdDetails.appendChild(inputGroup);\n\n    newForm.appendChild(userDetails);\n    newForm.appendChild(pwdDetails);\n    cardBody.appendChild(newForm);\n\n    // delete option\n    const deleteButton = makePrimaryBtn('button', 'deleteEntry', 'Delete entry');\n    deleteButton.setAttribute('class', 'btn btn-danger');\n    deleteButton.addEventListener('click', () => {\n        // delete entry from storage\n        deleteEntry(title);\n\n        // add a thing to vault page about item being deleted\n    });\n    cardBody.appendChild(deleteButton);\n    // edit option?\n\n    newCard.appendChild(cardBody);\n    resetMain();\n    const mainDiv = document.querySelector('#main-container');\n    mainDiv.appendChild(newCard); \n}\n\n// creates a list object for the vault entries list\nconst createVaultEntry = (title) => {\n    const entryItem = document.createElement('li');\n    entryItem.setAttribute('class', 'list-group-item btn vault-entry');\n\n    const titleText = document.createTextNode(title);\n    entryItem.appendChild(titleText);\n\n    // when this vault entry gets clicked, it will serve the details for that entry\n    entryItem.addEventListener('click', (event) => {\n        event.preventDefault();\n        renderEntryDetails(title);\n    })\n\n    return entryItem;\n\n}\n\nconst renderVault = async () => {\n    const user = await checkLoggedIn();\n    if (!user) {\n        return;\n    }\n    // search bar\n\n    const vaultCard = document.createElement('div');\n    setAttributes(vaultCard, {\n        'class': 'card',\n        'id': 'vaultCard'\n    });\n\n    const vaultHeading = document.createElement('h1');\n    setAttributes(vaultHeading, {\n        'class': 'header',\n        'id': 'vaultHeading'\n    });\n    const headingText = document.createTextNode('Your passwords');\n    vaultHeading.appendChild(headingText);\n    vaultCard.appendChild(vaultHeading);\n\n    // button for new password\n    const newBtn = makePrimaryBtn('button', 'newPwdFromVault', 'Add new password');\n    newBtn.setAttribute('class', 'btn btn-outline-primary');\n    newBtn.addEventListener('click', () => {\n        renderNewPass();\n    });\n    vaultCard.appendChild(newBtn);\n\n\n    // the entries\n    const entryGroup = document.createElement('ul');\n    setAttributes(entryGroup, {\n        'class': 'list-group list-group-flush',\n        'id': 'vaultEntriesList'\n    });\n    \n    const userVault = `${user}Vault`;\n    let r = await getFromLocal(userVault);\n    let vault = r[userVault];\n    console.log('rendering vault');\n    console.log(vault);\n    if (vault) {\n        let newEntry;\n        Object.keys(vault).sort().forEach((title) => {\n            newEntry = createVaultEntry(title);\n            entryGroup.appendChild(newEntry);\n        });\n    }\n    \n\n    vaultCard.appendChild(entryGroup);\n\n\n    // create nav button group\n    const pageNav = document.createElement('nav');\n    pageNav.setAttribute('aria-label', 'Vault page navigation');\n\n    const pagesList = document.createElement('ul');\n    pagesList.setAttribute('class', 'pagination');\n\n    const prev = document.createElement('li');\n    prev.setAttribute('class', 'page-item');\n    let link = document.createElement('a');\n    setAttributes(link, {\n        'class': 'page-link',\n        'href': '#',\n        'aria-label': 'Previous'\n    });\n    let span = document.createElement('span');\n    span.setAttribute('aria-hidden', 'true');\n    let text = document.createTextNode('<<');\n    span.appendChild(text);\n    link.appendChild(span);\n    prev.appendChild(link);\n    pagesList.appendChild(prev);\n\n    // do this in a loop for however many pages needed\n    let nextButton = createPageButton('1');\n    pagesList.append(nextButton);\n\n    // next button\n    const next = document.createElement('li');\n    next.setAttribute('class', 'page-item');\n    link = document.createElement('a');\n    setAttributes(link, {\n        'class': 'page-link',\n        'href': '#',\n        'aria-label': 'Next'\n    });\n    span = document.createElement('span');\n    span.setAttribute('aria-hidden', 'true');\n    text = document.createTextNode('>>');\n    span.appendChild(text);\n    link.appendChild(span);\n    next.appendChild(link);\n    pagesList.appendChild(next);\n\n    pageNav.appendChild(pagesList);\n\n    vaultCard.appendChild(pageNav);\n    resetMain();\n    const mainDiv = document.querySelector('#main-container');\n    mainDiv.appendChild(vaultCard);\n}\n\n// set listener for logo to bring back to welcome page\ndocument.querySelector('.navbar-brand').addEventListener('click', (event) => {\n    event.preventDefault();\n    renderWelcome();\n});\n\nrenderWelcome();\n\n//# sourceURL=webpack://password1/./src/window.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/window.js"]();
/******/ 	
/******/ })()
;